pipeline {
    agent any
    parameters {
        choice(
                name: 'REGION',
                choices: ['ap-northeast-2', 'us-east-1'],
                description: 'AWS Î¶¨Ï†ÑÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.'
        )
    }
    environment {
        GIT_CREDENTIAL_ID = '0362778c-564c-43d8-9c25-c32d4deeffb2'
        AWS_CREDENTIALS_ID = 'AWS_CREDENTIALS'
        AWS_ACCOUNT_ID = credentials('AWS_ID')
        SLACK_CHANNEL = '#jenkins-ÏïåÎ¶º'
    }

    stages {
        stage('Ï§ÄÎπÑ') {
            steps {
                checkout scm
                echo "‚ñ∂ BRANCH=${env.BRANCH_NAME}, REGION=${params.REGION}, JOB_NAME=${env.JOB_NAME}"
                script {
                    def ts = new Date().format('yyyyMMdd-HHmmss')
                    def regionPrefix = ['ap-northeast-2':'apn2','us-east-1':'use1']
                    env.SERVICE_NAME = "${env.JOB_NAME.split('/')[0]}"
                    env.IMAGE_TAG = "${env.SERVICE_NAME}-${ts}"
                    env.REGION_PREFIX = regionPrefix[params.REGION]
                }
                echo "Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏: ${env.IMAGE_TAG}"
                echo "ÎåÄÏÉÅ Î¶¨Ï†Ñ: ${params.REGION}"
            }
        }
        stage('Ïù¥ÎØ∏ÏßÄ ÎπåÎìú Î∞è ECR Ìë∏Ïãú') {
            when {
                expression { env.BRANCH_NAME == 'develop' }
            }
            steps {
                // ECR Î°úÍ∑∏Ïù∏
                withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: "${env.AWS_CREDENTIALS_ID}",
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]
                ]) {
                    script {
                        def parts = env.SERVICE_NAME.split('_')
                        def dockerfilePath = []
                        for(p in parts) {
                            def lower = p.toLowerCase()
                            def path = lower[0].toUpperCase()+lower.substring(1)
                            dockerfilePath.add(path)
                        }
                        def folderName = dockerfilePath.join('')
                        def devRepo = "dev-${env.REGION_PREFIX}-ecr-repo"
                        def devImgName = "${env.AWS_ACCOUNT_ID}.dkr.ecr.${params.REGION}.amazonaws.com/${devRepo}"

                        sh """
                           aws ecr get-login-password --region ${params.REGION} | docker login --username AWS --password-stdin ${env.AWS_ACCOUNT_ID}.dkr.ecr.${params.REGION}.amazonaws.com
                           docker build --platform linux/amd64 -t ${devImgName}:${env.IMAGE_TAG} ./services/${folderName}
                           docker push ${devImgName}:${env.IMAGE_TAG}
                        """
                    }
                }
            }
        }
        stage('dev tfvars ÏóÖÎç∞Ïù¥Ìä∏ Î∞è develop Î∏åÎûúÏπòÏóê Ïª§Î∞ã') {
            when {
                expression { env.BRANCH_NAME == 'develop' }
            }
            steps {
                script {
                    def shortRegion = params.REGION.replaceAll('-', '')
                    def devRepo = "dev-${env.REGION_PREFIX}-ecr-repo"
                    def devImgName = "${env.AWS_ACCOUNT_ID}.dkr.ecr.${params.REGION}.amazonaws.com/${devRepo}"

                    dir("IaC/${shortRegion}/env/dev") {
                        // terraform.tfvars Ïùò ÏÑúÎπÑÏä§Î≥Ñ image_uri ÏàòÏ†ï
                        sh """
                            sed -E -i'' -e "/^[ \\t]*${env.SERVICE_NAME}.*[ \\t]*=/,/^[ \\t]*}/ { s#^([ \\t]*)image_uri[ \\t]*=.*#\\1image_uri = \\"${devImgName}:${env.IMAGE_TAG}\\"# }" terraform.tfvars
                        """
                        sh "git add terraform.tfvars"
                    }
                    echo "‚ñ∂ Dev Î∞∞Ìè¨ ÌÉúÍ∑∏: ${env.IMAGE_TAG}"

                    withCredentials([string(credentialsId: 'GITHUB_EMAIL', variable: 'git_email')]) {
                        sshagent(credentials: ["${env.GIT_CREDENTIAL_ID}"]) {
                            sh """
                                git config user.email '${git_email}'
                                git config user.name 'Jenkins-CI'
                                git commit -m 'üöÄ[CI‚ñ∏CD] ${env.SERVICE_NAME}@${env.IMAGE_TAG} ‚Üí dev tfvars (${params.REGION}), build#${env.BUILD_ID}' || echo 'No Changes'
                                git push git@github.com:KJH0476/cicd-with-iac.git HEAD:develop
                            """
                        }
                    }
                }
            }
        }
        stage('dev Ïù¥ÎØ∏ÏßÄ ÌÖåÏä§Ìä∏ ÏôÑÎ£å Î∞è ÏäπÏù∏') {
            when {
                expression { env.BRANCH_NAME == 'develop' }
            }
            steps {
                input message: """
                - ÌÖåÏä§Ìä∏Ìï† Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏ : ${env.IMAGE_TAG}
                ÌÖåÏä§Ìä∏ ÏôÑÎ£å Ïãú candidate ÌÉúÍ∑∏Î°ú Ìë∏ÏãúÎê©ÎãàÎã§.
                """
                withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: "${env.AWS_CREDENTIALS_ID}",
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]
                ]) {
                    script {
                        def devRepo = "dev-${env.REGION_PREFIX}-ecr-repo"
                        def devImgName = "${env.AWS_ACCOUNT_ID}.dkr.ecr.${params.REGION}.amazonaws.com/${devRepo}"

                        sh """
                           aws ecr get-login-password --region ${params.REGION} | docker login --username AWS --password-stdin ${env.AWS_ACCOUNT_ID}.dkr.ecr.${params.REGION}.amazonaws.com
                           docker tag ${devImgName}:${env.IMAGE_TAG} ${devImgName}:candidate
                           docker push ${devImgName}:candidate
                        """
                    }
                }
            }
        }
        stage('prod tfvars ÏóÖÎç∞Ïù¥Ìä∏ Î∞è main Î∏åÎûúÏπòÏóê Ïª§Î∞ã') {
            when {
                expression { env.BRANCH_NAME == 'main' }
            }
            steps {
                withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: "${env.AWS_CREDENTIALS_ID}",
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]
                ]) {
                    script {
                        def shortRegion = params.REGION.replaceAll('-', '')
                        def devRepo  = "dev-${env.REGION_PREFIX}-ecr-repo"
                        def prodRepo = "prod-${env.REGION_PREFIX}-ecr-repo"
                        def devImgName = "${env.AWS_ACCOUNT_ID}.dkr.ecr.${params.REGION}.amazonaws.com/${devRepo}"
                        def prodImgName = "${env.AWS_ACCOUNT_ID}.dkr.ecr.${params.REGION}.amazonaws.com/${prodRepo}"

                        sh """
                            aws ecr get-login-password --region ${params.REGION} | docker login --username AWS --password-stdin ${env.AWS_ACCOUNT_ID}.dkr.ecr.${params.REGION}.amazonaws.com
                            docker tag ${devImgName}:candidate ${prodImgName}:${env.IMAGE_TAG}
                            docker push ${prodImgName}:${env.IMAGE_TAG}
                        """

                        dir("IaC/${shortRegion}/env/prod") {
                            // terraform.tfvars Ïùò ÏÑúÎπÑÏä§Î≥Ñ image_uri ÏàòÏ†ï
                            sh """
                                sed -E -i'' -e "/^[ \\t]*${env.SERVICE_NAME}.*[ \\t]*=/,/^[ \\t]*}/ { s#^([ \\t]*)image_uri[ \\t]*=.*#\\1image_uri = \\"${prodImgName}:${env.IMAGE_TAG}\\"# }" terraform.tfvars
                            """
                            sh "git add terraform.tfvars"
                        }
                        echo "‚ñ∂ Prod Î∞∞Ìè¨ ÌÉúÍ∑∏: ${env.IMAGE_TAG}"

                        withCredentials([string(credentialsId: 'GITHUB_EMAIL', variable: 'git_email')]) {
                            sshagent(credentials: ["${env.GIT_CREDENTIAL_ID}"]) {
                                sh """
                                    git config user.email '${git_email}'
                                    git config user.name 'Jenkins-CI'
                                    git commit -m 'üöÄ[CI‚ñ∏CD] ${env.SERVICE_NAME}@${env.IMAGE_TAG} ‚Üí prod tfvars (${params.REGION}), build#${env.BUILD_ID}' || echo 'No Changes'
                                    git push git@github.com:KJH0476/cicd-with-iac.git HEAD:main
                                """
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        success {
            slackSend (
                    channel: "${env.SLACK_CHANNEL}",
                    color: '#00b050',
                    message: """
                        ‚úÖ *CI ÏÑ±Í≥µ*  
                        - Build Id: `${env.BUILD_ID}`
                        - Job: `${env.JOB_NAME}`  
                        - Branch: `${env.BRANCH_NAME}`  
                        - Region: `${params.REGION}`
                        - Changed Service: `${env.SERVICE_NAME}`  
                        - Image Tag: `${env.IMAGE_TAG}`  
                    """.stripIndent()
            )
        }
        failure {
            slackSend (
                    channel: "${env.SLACK_CHANNEL}",
                    color: '#ff0000',
                    message: """
                        ‚ùå *CI Ïã§Ìå®*  
                        - Build Id: `${env.BUILD_ID}`
                        - Job: `${env.JOB_NAME}`
                        - Branch: `${env.BRANCH_NAME}`  
                        - Region: `${params.REGION}`
                        - Changed Service: `${env.SERVICE_NAME}`  
                        - Image Tag: `${env.IMAGE_TAG}`  
                    """.stripIndent()
            )
        }
    }
}